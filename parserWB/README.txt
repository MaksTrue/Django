cd parserWB
python manage.py runserver

# Django Парсер Данных

Этот проект содержит Django приложение для парсинга данных с сайта Wildbberies и сохранения их в базе данных.

На данный момент создана одна модель 'Product'

Модель `Product` используется для хранения данных о продуктах, полученных в результате парсинга.
Она включает следующие поля:

- `category`: категория продукта.
- `article`: артикул продукта.
- `name`: наименование продукта.
- `rating`: рейтинг продукта.
- `review_count`: количество отзывов о продукте.
- `price`: цена продукта.
- `url`: ссылка на продукт.

Всего в Django пока только одна команда 'fill_db'

Команда `fill_db` позволяет заполнить базу данных данными, полученными в результате парсинга.
Эта команда выполняет следующие действия:

1. Запрашивает у пользователя ввод категории для парсинга данных.
2. Парсит данные из внешнего источника по указанной категории.
3. Сохраняет полученные данные в таблицу `Product` базы данных.

Логин и пароль от админки - maksim/qwaszx123


==============================================================================

Добавлено новая страница с созданием постов, после написания и сохранения поста.
После написания и сохранения поста, пользователя перенапрляет на главную страницу.

Добавлен новый html шаблон create - шаблон под создание поста.

Скорректированны views с использованием Class-based views (CBV)

В моделях убраны дублирования, тех что возможно было убрать, для дублей создан
свой класс class TimeStamp(models.Model)

В формы добавлен класс class PostForm(forms.ModelForm), для отрисовки красивой формы написания постов.
===============================================================================
Новые пользователи (не админы):
логин - roma
пароль - qwaszx1234

логин - oleg
пароль - qwaszx12345
===============================================================================
Проект покрыт тестами в следующих модулях:
1. parserWBapp.models
Тесты проверяют следующее:
Сделаный тесты для проверки, что поля в моделях заполняются правильно.

2. parserWBapp.views
Тесты проверяют следующее:
* Проверка существования формы для парсинга на странице;
* Проверка выполнения парсига;
* Проверка отображения результатов парсинга на странице с результатми;
* Проверка страницы с постом, содержит ли страница все необходимые данные для поста;
* Проверка доступа к странице создания поста для авторизованных пользователей;
* Проверка перенаправления неавторизованного пользователя на страницу входа.

3. userapp.models
Тесты проверяют следующее:
* Проверка возможности регистрации пользователя с одинаковым e-mail;
* Проверка является ли пользователь автором;
* Проверка успешного создания пользователя.

4. userapp.views
Тесты проверяют следующее:
* Проверка успешной авторизации пользователя;
* Проверка успешной регистрации пользователя и перенаправление его на страницу входа.

===============================================================================
* В проект добавлены страници и возможность их листать на главной странице и на странице с резулитатми парсинга.
* Добавлена кнопка "Написать пост" на главной странице.
* В подвал сайта добавлена уникальная подпись.